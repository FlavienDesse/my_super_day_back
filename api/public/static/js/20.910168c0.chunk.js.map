{"version":3,"sources":["Components/Biorythm/BiorythmMain/style.js","Components/Biorythm/BiorythmMain/biorythm.js"],"names":["useStyles","makeStyles","theme","annotationTexte","marginTop","fontWeight","fontSize","annotationTextPhysique","color","annotationTextEmotionnel","annotationTextIntellectuel","Biorythm","label","date","Date","React","useState","chartData","setChartData","numDaySinceBirth","setNumDaySinceBirth","useEffect","requestOptions","method","headers","Object","assign","authHeader","body","JSON","stringify","id_user","encodeURI","parse","window","localStorage","getItem","id","fetch","url","then","res","json","data","resultat","setDate","getDate","numDayDisplay","i","copyDate","getTime","day","getUTCDate","month","getUTCMonth","push","chart","classes","labels","datasets","pointRadius","function","x","Math","sin","PI","borderColor","fill","className","container","Grid","spacing","item","md","sm","style","width","plugins","beforeUpdate","options","config","length","j","y","fct","sampleSize","responsive","title","text","display","annotation","annotations","drawTime","type","mode","scaleID","value","round","borderWidth","scales","yAxes","ticks","stepSize","autoSkip","maxTicksLimit","gridLines","xAxes","CircularProgress"],"mappings":"oMAoBeA,EAlBGC,aAAW,SAACC,GAAD,MAAY,CACrCC,gBAAkB,CACdC,UAAW,OACXC,WAAW,OACXC,SAAS,SAEbC,uBAAuB,CACnBC,MAAM,OAEVC,yBAAyB,CACrBD,MAAM,SAEVE,2BAA2B,CACvBF,MAAM,Y,4CCPDG,EAAW,WACpB,IAAIC,EAAQ,GACRC,EAAO,IAAIC,KAFW,EAGQC,IAAMC,SAAS,IAHvB,mBAGnBC,EAHmB,KAGRC,EAHQ,OAIsBH,IAAMC,UAAU,GAJtC,mBAInBG,EAJmB,KAIDC,EAJC,KAQ1BC,qBAAU,WACN,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAASC,OAAOC,OAAO,GAAIC,cAAc,CAAC,eAAgB,qBAC1DC,KAAMC,KAAKC,UAAU,CACjBC,QAASC,UAAUH,KAAKI,MAAMC,OAAOC,aAAaC,QAAQ,UAAUC,OAI5EC,MAAM,GAAD,OAAIJ,OAAOK,IAAX,oDAAkEjB,GAAgBkB,MAAK,SAACC,GACzF,OAAOA,EAAIC,UACZF,MAAK,SAACG,GAELvB,EAAoBuB,EAAKC,UACzB/B,EAAKgC,QAAQhC,EAAKiC,UAAYC,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAlBJ,GAkBuBA,IAAK,CAEpCnC,EAAKgC,QAAQhC,EAAKiC,UAAY,GAC9B,IAAIG,EAAW,IAAInC,KAAKD,EAAKqC,WACzBC,EAAMF,EAASG,aACfC,EAAQJ,EAASK,cAAgB,EAErC1C,EAAM2C,KAAKJ,EAAM,IAAME,GAM3BG,SAKL,IAGH,IAAMC,EAAUzD,IAGVwD,EAAQ,WACVtC,EAAa,CACTwC,OAAQ9C,EAER+C,SAAU,CAAC,CACPC,YAAa,EACbhD,MAAO,WACPiD,SAAU,SAAUC,GAEhB,OAAO,IAAMC,KAAKC,IAAK,EAAID,KAAKE,IAAOH,EAAI,IAAO,KAGtDI,YAAa,qBACbvB,KAAM,GACNwB,MAAM,GAEN,CACIP,YAAa,EACbhD,MAAO,aACPiD,SAAU,SAAUC,GAGhB,OAAO,IAAMC,KAAKC,IAAK,EAAID,KAAKE,IAAOH,EAAI,IAAO,KAEtDI,YAAa,qBACbvB,KAAM,GACNwB,MAAM,GAEV,CACIP,YAAa,EACbhD,MAAO,eACPiD,SAAU,SAAUC,GAEhB,OAAO,IAAMC,KAAKC,IAAK,EAAID,KAAKE,IAAOH,EAAI,IAAO,KAEtDI,YAAa,qBACbvB,KAAM,GACNwB,MAAM,OAMtB,OACI,yBAAKC,UAAWX,EAAQY,YAEM,IAAtBlD,EACI,kBAACmD,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,GAErB,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IAElB,kBAAC,IAAD,CAAMC,MAAO,CAACC,MAAO,QAASC,QAAS,CAAC,CACpCC,aAAc,SAAUtB,EAAOuB,GAE3B,IADA,IAAIpC,EAAOa,EAAMwB,OAAOrC,KACfK,EAAI,EAAGA,EAAIL,EAAKgB,SAASsB,OAAQjC,IACtC,IAAK,IAAIkC,EAAI,EAAGA,EAAIvC,EAAKe,OAAOuB,OAAQC,IAAK,CACzC,IAAIzC,EAAMtB,EAAmB+D,EAAInC,GAE7BoC,GAAIC,EADEzC,EAAKgB,SAASX,GAAGa,UACfpB,GACZE,EAAKgB,SAASX,GAAGL,KAAKY,KAAK4B,OAKvCxC,KAAM1B,EAAW8D,QAAS,CAE1BM,WAAY,IACZC,YAAY,EACZC,MAAO,CAACC,KAAM,yBAA0BC,SAAS,GACjDC,WAAY,CACRC,YAAa,CAAC,CACVC,SAAU,YACVvD,GAAI,WACJwD,KAAM,OACNC,KAAM,WACNC,QAAS,WACTC,MAAOjC,KAAKkC,MAAMlD,IAClBmB,YAAa,QACbgC,YAAa,KAIrBC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHC,SAAU,GACVC,UAAU,EACVC,cAAe,IAEnBC,UAAW,CACPhB,SAAS,KAIrBiB,MAAO,CAEH,CACID,UAAW,CACPhB,SAAS,UAUjC,kBAACnB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIN,UAAWX,EAAQtD,iBAEzC,8CAAmB,0BAAMiE,UAAWX,EAAQlD,wBAAzB,cAAnB,aACM,0BACE6D,UAAWX,EAAQlD,wBADrB,IAC+CwD,KAAKkC,MAAM,IAAMlC,KAAKC,IAAK,EAAID,KAAKE,KAAO9C,EAAmB,GAAK,IAAM,KADxH,MAGN,8CAAmB,0BAAMiD,UAAWX,EAAQhD,0BAAzB,gBAAnB,YACM,0BACE2D,UAAWX,EAAQhD,0BADrB,IACiDsD,KAAKkC,MAAM,IAAMlC,KAAKC,IAAK,EAAID,KAAKE,KAAO9C,EAAmB,GAAK,IAAM,KAD1H,MAGN,8CAAmB,0BACfiD,UAAWX,EAAQ/C,4BADJ,kBAAnB,aAEM,0BACE0D,UAAWX,EAAQ/C,4BADrB,IACmDqD,KAAKkC,MAAM,IAAMlC,KAAKC,IAAK,EAAID,KAAKE,KAAO9C,EAAmB,GAAK,IAAM,KAD5H,QAKd,kBAACwF,EAAA,EAAD","file":"static/js/20.910168c0.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    annotationTexte : {\r\n        marginTop: '60px',\r\n        fontWeight:'bold',\r\n        fontSize:'1.5em'\r\n    },\r\n    annotationTextPhysique:{\r\n        color:'red',\r\n    },\r\n    annotationTextEmotionnel:{\r\n        color:'green',\r\n    },\r\n    annotationTextIntellectuel:{\r\n        color:'blue',\r\n    },\r\n\r\n}));\r\n\r\nexport default useStyles;","import React, {useEffect} from \"react\";\r\nimport useStyles from \"./style\";\r\nimport {Line} from 'react-chartjs-2';\r\nimport {annotation} from 'chartjs-plugin-annotation'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {authHeader} from \"../../../Controller/CheckConnected\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport const Biorythm = () => {\r\n    let label = [];\r\n    let date = new Date();\r\n    const [chartData, setChartData] = React.useState({});\r\n    const [numDaySinceBirth, setNumDaySinceBirth] = React.useState(-1)\r\n    let numDayDisplay = 30;\r\n\r\n\r\n    useEffect(() => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: Object.assign({}, authHeader(), {'Content-Type': 'application/json'}),\r\n            body: JSON.stringify({\r\n                id_user: encodeURI(JSON.parse(window.localStorage.getItem('users')).id),\r\n            }),\r\n\r\n        };\r\n        fetch(`${window.url}/mysuperday/api/biorythme/getNumberDaySinceBirth`, requestOptions).then((res) => {\r\n            return res.json()\r\n        }).then((data) => {\r\n\r\n            setNumDaySinceBirth(data.resultat)\r\n            date.setDate(date.getDate() - numDayDisplay / 2);\r\n            for (let i = 0; i < numDayDisplay; i++) {\r\n\r\n                date.setDate(date.getDate() + 1);\r\n                let copyDate = new Date(date.getTime());\r\n                let day = copyDate.getUTCDate();\r\n                let month = copyDate.getUTCMonth() + 1;\r\n\r\n                label.push(day + '/' + month);\r\n\r\n            }\r\n\r\n\r\n\r\n            chart();\r\n\r\n\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const chart = () => {\r\n        setChartData({\r\n            labels: label,\r\n\r\n            datasets: [{\r\n                pointRadius: 0,\r\n                label: \"Physique\",\r\n                function: function (x) {\r\n\r\n                    return 100 * Math.sin((2 * Math.PI * ((x % 23)) / 23))\r\n\r\n                },\r\n                borderColor: \"rgba(192, 0, 0, 1)\",\r\n                data: [],\r\n                fill: false\r\n            },\r\n                {\r\n                    pointRadius: 0,\r\n                    label: \"Emotionnel\",\r\n                    function: function (x) {\r\n\r\n\r\n                        return 100 * Math.sin((2 * Math.PI * ((x % 28)) / 28))\r\n                    },\r\n                    borderColor: \"rgba(0, 192, 0, 1)\",\r\n                    data: [],\r\n                    fill: false\r\n                },\r\n                {\r\n                    pointRadius: 0,\r\n                    label: \"Intellectuel\",\r\n                    function: function (x) {\r\n\r\n                        return 100 * Math.sin((2 * Math.PI * ((x % 33)) / 33))\r\n                    },\r\n                    borderColor: \"rgba(0, 0, 192, 1)\",\r\n                    data: [],\r\n                    fill: false\r\n                }]\r\n        })\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {\r\n                numDaySinceBirth !== -1 ?\r\n                    <Grid container spacing={3}>\r\n\r\n                        <Grid item md={8} sm={12}>\r\n\r\n                            <Line style={{width: \"100%\"}} plugins={[{\r\n                                beforeUpdate: function (chart, options) {\r\n                                    var data = chart.config.data;\r\n                                    for (var i = 0; i < data.datasets.length; i++) {\r\n                                        for (var j = 0; j < data.labels.length; j++) {\r\n                                            let res = numDaySinceBirth + j - numDayDisplay / 2\r\n                                            var fct = data.datasets[i].function;\r\n                                            var y = fct(res);\r\n                                            data.datasets[i].data.push(y);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }]} data={chartData} options={{\r\n\r\n                                sampleSize: 50000,\r\n                                responsive: true,\r\n                                title: {text: 'Votre biorythme actuel', display: true},\r\n                                annotation: {\r\n                                    annotations: [{\r\n                                        drawTime: 'afterDraw', // overrides annotation.drawTime if set\r\n                                        id: 'a-line-1', // optional\r\n                                        type: 'line',\r\n                                        mode: 'vertical',\r\n                                        scaleID: 'x-axis-0',\r\n                                        value: Math.round(numDayDisplay / 2 - 1),\r\n                                        borderColor: 'black',\r\n                                        borderWidth: 3,\r\n                                    }]\r\n                                },\r\n\r\n                                scales: {\r\n                                    yAxes: [\r\n                                        {\r\n                                            ticks: {\r\n                                                stepSize: 0.5,\r\n                                                autoSkip: true,\r\n                                                maxTicksLimit: 10,\r\n                                            },\r\n                                            gridLines: {\r\n                                                display: true\r\n                                            }\r\n                                        }\r\n                                    ],\r\n                                    xAxes: [\r\n\r\n                                        {\r\n                                            gridLines: {\r\n                                                display: true\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n\r\n                            }}/>\r\n\r\n\r\n                        </Grid>\r\n                        <Grid item md={4} sm={12} className={classes.annotationTexte}>\r\n\r\n                            <p>Votre biorythme <span className={classes.annotationTextPhysique}> Physique </span> est\r\n                                à <span\r\n                                    className={classes.annotationTextPhysique}> {Math.round(100 * Math.sin((2 * Math.PI * ((numDaySinceBirth - 1) % 23) / 23)))}%</span>\r\n                            </p>\r\n                            <p>Votre biorythme <span className={classes.annotationTextEmotionnel}> Emotionnel </span>est\r\n                                à <span\r\n                                    className={classes.annotationTextEmotionnel}> {Math.round(100 * Math.sin((2 * Math.PI * ((numDaySinceBirth - 1) % 28) / 28)))}%</span>\r\n                            </p>\r\n                            <p>Votre biorythme <span\r\n                                className={classes.annotationTextIntellectuel}> Intellectuel </span> est\r\n                                à <span\r\n                                    className={classes.annotationTextIntellectuel}> {Math.round(100 * Math.sin((2 * Math.PI * ((numDaySinceBirth - 1) % 33) / 33)))}%</span>\r\n                            </p>\r\n                        </Grid>\r\n                    </Grid> :\r\n                    <CircularProgress/>\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n"],"sourceRoot":""}